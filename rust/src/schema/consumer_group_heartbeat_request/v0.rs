// This file was generated. Do not edit.

use std::io::{Read, Result, Write};

use serde::{Deserialize, Serialize};
use uuid::Uuid;
#[cfg(test)] use proptest_derive::Arbitrary;

use crate::arrays::{read_array, read_nullable_array, write_array, write_nullable_array};
use crate::markers::{ApiMessage, Request};
use crate::readable_writable::{Readable, Writable};
use crate::tagged_fields::{RawTaggedField, read_tagged_fields, write_tagged_fields};
#[cfg(test)] use crate::test_utils::proptest_strategies;

/// ConsumerGroupHeartbeatRequest, version 0.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone)]
#[cfg_attr(test, derive(Arbitrary))]
pub struct ConsumerGroupHeartbeatRequest {
    /// The group identifier.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::string()"))]
    pub group_id: String,
    /// The member id generated by the coordinator. The member id must be kept during the entire lifetime of the member.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::string()"))]
    pub member_id: String,
    /// The current member epoch; 0 to join the group; -1 to leave the group; -2 to indicate that the static member will rejoin.
    pub member_epoch: i32,
    /// null if not provided or if it didn't change since the last heartbeat; the instance Id otherwise.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::optional_string()"))]
    pub instance_id: Option<String>,
    /// null if not provided or if it didn't change since the last heartbeat; the rack ID of consumer otherwise.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::optional_string()"))]
    pub rack_id: Option<String>,
    /// -1 if it didn't change since the last heartbeat; the maximum time in milliseconds that the coordinator will wait on the member to revoke its partitions otherwise.
    pub rebalance_timeout_ms: i32,
    /// null if it didn't change since the last heartbeat; the subscribed topic names otherwise.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::optional_vec()"))]
    pub subscribed_topic_names: Option<Vec<String>>,
    /// null if not used or if it didn't change since the last heartbeat; the server side assignor to use otherwise.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::optional_string()"))]
    pub server_assignor: Option<String>,
    /// null if it didn't change since the last heartbeat; the partitions owned by the member.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::optional_vec()"))]
    pub topic_partitions: Option<Vec<TopicPartitions>>,
    /// Unknown tagged fields.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::unknown_tagged_fields()"))]
    pub _unknown_tagged_fields: Vec<RawTaggedField>,
}

impl ApiMessage for ConsumerGroupHeartbeatRequest {
    fn api_key(&self) -> i16 {
        68
    }
    
    fn version(&self) -> i16 {
        0
    }
}

impl Request for ConsumerGroupHeartbeatRequest { }

impl Default for ConsumerGroupHeartbeatRequest {
    fn default() -> Self {
        ConsumerGroupHeartbeatRequest {
            group_id: String::from(""),
            member_id: String::from(""),
            member_epoch: 0_i32,
            instance_id: None,
            rack_id: None,
            rebalance_timeout_ms: -1_i32,
            subscribed_topic_names: None,
            server_assignor: None,
            topic_partitions: None,
            _unknown_tagged_fields: Vec::new(),
        }
    }
}

impl ConsumerGroupHeartbeatRequest {
    pub fn new<S1: AsRef<str>, S2: AsRef<str>, S3: AsRef<str>, S4: AsRef<str>, S5: AsRef<str>>(group_id: S1, member_id: S2, member_epoch: i32, instance_id: Option<S3>, rack_id: Option<S4>, rebalance_timeout_ms: i32, subscribed_topic_names: Option<Vec<String>>, server_assignor: Option<S5>, topic_partitions: Option<Vec<TopicPartitions>>) -> Self {
        Self {
            group_id: group_id.as_ref().to_string(),
            member_id: member_id.as_ref().to_string(),
            member_epoch,
            instance_id: instance_id.map(|s| s.as_ref().to_string()),
            rack_id: rack_id.map(|s| s.as_ref().to_string()),
            rebalance_timeout_ms,
            subscribed_topic_names,
            server_assignor: server_assignor.map(|s| s.as_ref().to_string()),
            topic_partitions,
            _unknown_tagged_fields: vec![],
        }
    }
}

#[cfg(test)]
mod tests_consumer_group_heartbeat_request_new_and_default {
    use super::*;
    
    #[test]
    fn test() {
        let d = ConsumerGroupHeartbeatRequest::new(
            String::from(""),
            String::from(""),
            0_i32,
            None::<String>,
            None::<String>,
            -1_i32,
            None::<Vec::<String>>,
            None::<String>,
            None::<Vec::<TopicPartitions>>,
        );
        assert_eq!(d, ConsumerGroupHeartbeatRequest::default());
    }
}

impl Readable for ConsumerGroupHeartbeatRequest {
    fn read(#[allow(unused)] input: &mut impl Read) -> Result<Self> {
        let group_id = String::read_ext(input, "group_id", true)?;
        let member_id = String::read_ext(input, "member_id", true)?;
        let member_epoch = i32::read(input)?;
        let instance_id = Option::<String>::read_ext(input, "instance_id", true)?;
        let rack_id = Option::<String>::read_ext(input, "rack_id", true)?;
        let rebalance_timeout_ms = i32::read(input)?;
        let subscribed_topic_names = read_nullable_array::<String>(input, "subscribed_topic_names", true)?;
        let server_assignor = Option::<String>::read_ext(input, "server_assignor", true)?;
        let topic_partitions = read_nullable_array::<TopicPartitions>(input, "topic_partitions", true)?;
        let tagged_fields_callback = |tag: i32, _: &[u8]| {
            match tag {
                _ => Ok(false)
            }
        };
        let _unknown_tagged_fields = read_tagged_fields(input, tagged_fields_callback)?;
        Ok(ConsumerGroupHeartbeatRequest {
            group_id, member_id, member_epoch, instance_id, rack_id, rebalance_timeout_ms, subscribed_topic_names, server_assignor, topic_partitions, _unknown_tagged_fields
        })
    }
}

impl Writable for ConsumerGroupHeartbeatRequest {
    fn write(&self, #[allow(unused)] output: &mut impl Write) -> Result<()> {
        self.group_id.write_ext(output, "self.group_id", true)?;
        self.member_id.write_ext(output, "self.member_id", true)?;
        self.member_epoch.write(output)?;
        self.instance_id.write_ext(output, "self.instance_id", true)?;
        self.rack_id.write_ext(output, "self.rack_id", true)?;
        self.rebalance_timeout_ms.write(output)?;
        write_nullable_array(output, "self.subscribed_topic_names", self.subscribed_topic_names.as_deref(), true)?;
        self.server_assignor.write_ext(output, "self.server_assignor", true)?;
        write_nullable_array(output, "self.topic_partitions", self.topic_partitions.as_deref(), true)?;
        write_tagged_fields(output, &[], &self._unknown_tagged_fields)?;
        Ok(())
    }
}

/// TopicPartitions, version 0.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone)]
#[cfg_attr(test, derive(Arbitrary))]
pub struct TopicPartitions {
    /// The topic ID.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::uuid()"))]
    pub topic_id: Uuid,
    /// The partitions.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::vec()"))]
    pub partitions: Vec<i32>,
    /// Unknown tagged fields.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::unknown_tagged_fields()"))]
    pub _unknown_tagged_fields: Vec<RawTaggedField>,
}

impl Default for TopicPartitions {
    fn default() -> Self {
        TopicPartitions {
            topic_id: Uuid::nil(),
            partitions: Vec::<i32>::new(),
            _unknown_tagged_fields: Vec::new(),
        }
    }
}

impl TopicPartitions {
    pub fn new(topic_id: Uuid, partitions: Vec<i32>) -> Self {
        Self {
            topic_id,
            partitions,
            _unknown_tagged_fields: vec![],
        }
    }
}

#[cfg(test)]
mod tests_topic_partitions_new_and_default {
    use super::*;
    
    #[test]
    fn test() {
        let d = TopicPartitions::new(
            Uuid::nil(),
            Vec::<i32>::new(),
        );
        assert_eq!(d, TopicPartitions::default());
    }
}

impl Readable for TopicPartitions {
    fn read(#[allow(unused)] input: &mut impl Read) -> Result<Self> {
        let topic_id = Uuid::read(input)?;
        let partitions = read_array::<i32>(input, "partitions", true)?;
        let tagged_fields_callback = |tag: i32, _: &[u8]| {
            match tag {
                _ => Ok(false)
            }
        };
        let _unknown_tagged_fields = read_tagged_fields(input, tagged_fields_callback)?;
        Ok(TopicPartitions {
            topic_id, partitions, _unknown_tagged_fields
        })
    }
}

impl Writable for TopicPartitions {
    fn write(&self, #[allow(unused)] output: &mut impl Write) -> Result<()> {
        self.topic_id.write(output)?;
        write_array(output, "self.partitions", &self.partitions, true)?;
        write_tagged_fields(output, &[], &self._unknown_tagged_fields)?;
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use proptest::prelude::*;
    
    #[test]
    fn test_java_default() {
        crate::test_utils::test_java_default::<ConsumerGroupHeartbeatRequest>("ConsumerGroupHeartbeatRequest", 0);
    }
    
    proptest! {
        #[test]
        fn test_serde(data: ConsumerGroupHeartbeatRequest) {
            crate::test_utils::test_serde(&data)?;
        }
    }
    
    proptest! {
        #[test]
        fn test_java_arbitrary(data: ConsumerGroupHeartbeatRequest) {
            crate::test_utils::test_java_arbitrary(&data, "ConsumerGroupHeartbeatRequest", 0);
        }
    }
}
