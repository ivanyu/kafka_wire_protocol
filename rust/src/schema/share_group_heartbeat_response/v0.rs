// This file was generated. Do not edit.

use std::io::{Read, Result, Write};

use serde::{Deserialize, Serialize};
use uuid::Uuid;
#[cfg(test)] use proptest_derive::Arbitrary;

use crate::arrays::{read_array, write_array};
use crate::markers::{ApiMessage, Response};
use crate::readable_writable::{Readable, Writable};
use crate::tagged_fields::{RawTaggedField, read_tagged_fields, write_tagged_fields};
#[cfg(test)] use crate::test_utils::proptest_strategies;

/// ShareGroupHeartbeatResponse, version 0.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone)]
#[cfg_attr(test, derive(Arbitrary))]
pub struct ShareGroupHeartbeatResponse {
    /// The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
    pub throttle_time_ms: i32,
    /// The top-level error code, or 0 if there was no error.
    pub error_code: i16,
    /// The top-level error message, or null if there was no error.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::optional_string()"))]
    pub error_message: Option<String>,
    /// The member ID is generated by the consumer and provided by the consumer for all requests.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::optional_string()"))]
    pub member_id: Option<String>,
    /// The member epoch.
    pub member_epoch: i32,
    /// The heartbeat interval in milliseconds.
    pub heartbeat_interval_ms: i32,
    /// null if not provided; the assignment otherwise.
    pub assignment: Option<Assignment>,
    /// Unknown tagged fields.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::unknown_tagged_fields()"))]
    pub _unknown_tagged_fields: Vec<RawTaggedField>,
}

impl ApiMessage for ShareGroupHeartbeatResponse {
    fn api_key(&self) -> i16 {
        76
    }
    
    fn version(&self) -> i16 {
        0
    }
}

impl Response for ShareGroupHeartbeatResponse { }

impl Default for ShareGroupHeartbeatResponse {
    fn default() -> Self {
        ShareGroupHeartbeatResponse {
            throttle_time_ms: 0_i32,
            error_code: 0_i16,
            error_message: None,
            member_id: None,
            member_epoch: 0_i32,
            heartbeat_interval_ms: 0_i32,
            assignment: None,
            _unknown_tagged_fields: Vec::new(),
        }
    }
}

impl ShareGroupHeartbeatResponse {
    pub fn new<S1: AsRef<str>, S2: AsRef<str>>(throttle_time_ms: i32, error_code: i16, error_message: Option<S1>, member_id: Option<S2>, member_epoch: i32, heartbeat_interval_ms: i32, assignment: Option<Assignment>) -> Self {
        Self {
            throttle_time_ms,
            error_code,
            error_message: error_message.map(|s| s.as_ref().to_string()),
            member_id: member_id.map(|s| s.as_ref().to_string()),
            member_epoch,
            heartbeat_interval_ms,
            assignment,
            _unknown_tagged_fields: vec![],
        }
    }
}

#[cfg(test)]
mod tests_share_group_heartbeat_response_new_and_default {
    use super::*;
    
    #[test]
    fn test() {
        let d = ShareGroupHeartbeatResponse::new(
            0_i32,
            0_i16,
            None::<String>,
            None::<String>,
            0_i32,
            0_i32,
            None::<Assignment>,
        );
        assert_eq!(d, ShareGroupHeartbeatResponse::default());
    }
}

impl Readable for ShareGroupHeartbeatResponse {
    fn read(#[allow(unused)] input: &mut impl Read) -> Result<Self> {
        let throttle_time_ms = i32::read(input)?;
        let error_code = i16::read(input)?;
        let error_message = Option::<String>::read_ext(input, "error_message", true)?;
        let member_id = Option::<String>::read_ext(input, "member_id", true)?;
        let member_epoch = i32::read(input)?;
        let heartbeat_interval_ms = i32::read(input)?;
        let assignment = (if i8::read(input)? < 0 { Ok(None) } else { Assignment::read(input).map(Some) })?;
        let tagged_fields_callback = |tag: i32, _: &[u8]| {
            match tag {
                _ => Ok(false)
            }
        };
        let _unknown_tagged_fields = read_tagged_fields(input, tagged_fields_callback)?;
        Ok(ShareGroupHeartbeatResponse {
            throttle_time_ms, error_code, error_message, member_id, member_epoch, heartbeat_interval_ms, assignment, _unknown_tagged_fields
        })
    }
}

impl Writable for ShareGroupHeartbeatResponse {
    fn write(&self, #[allow(unused)] output: &mut impl Write) -> Result<()> {
        self.throttle_time_ms.write(output)?;
        self.error_code.write(output)?;
        self.error_message.write_ext(output, "self.error_message", true)?;
        self.member_id.write_ext(output, "self.member_id", true)?;
        self.member_epoch.write(output)?;
        self.heartbeat_interval_ms.write(output)?;
        (if let Some(v) = &self.assignment { 1_i8.write(output)?; v.write(output) } else { (-1_i8).write(output) })?;
        write_tagged_fields(output, &[], &self._unknown_tagged_fields)?;
        Ok(())
    }
}

/// Assignment, version 0.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone)]
#[cfg_attr(test, derive(Arbitrary))]
pub struct Assignment {
    /// The partitions assigned to the member.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::vec()"))]
    pub topic_partitions: Vec<TopicPartitions>,
    /// Unknown tagged fields.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::unknown_tagged_fields()"))]
    pub _unknown_tagged_fields: Vec<RawTaggedField>,
}

impl Default for Assignment {
    fn default() -> Self {
        Assignment {
            topic_partitions: Vec::<TopicPartitions>::new(),
            _unknown_tagged_fields: Vec::new(),
        }
    }
}

impl Assignment {
    pub fn new(topic_partitions: Vec<TopicPartitions>) -> Self {
        Self {
            topic_partitions,
            _unknown_tagged_fields: vec![],
        }
    }
}

#[cfg(test)]
mod tests_assignment_new_and_default {
    use super::*;
    
    #[test]
    fn test() {
        let d = Assignment::new(
            Vec::<TopicPartitions>::new(),
        );
        assert_eq!(d, Assignment::default());
    }
}

impl Readable for Assignment {
    fn read(#[allow(unused)] input: &mut impl Read) -> Result<Self> {
        let topic_partitions = read_array::<TopicPartitions>(input, "topic_partitions", true)?;
        let tagged_fields_callback = |tag: i32, _: &[u8]| {
            match tag {
                _ => Ok(false)
            }
        };
        let _unknown_tagged_fields = read_tagged_fields(input, tagged_fields_callback)?;
        Ok(Assignment {
            topic_partitions, _unknown_tagged_fields
        })
    }
}

impl Writable for Assignment {
    fn write(&self, #[allow(unused)] output: &mut impl Write) -> Result<()> {
        write_array(output, "self.topic_partitions", &self.topic_partitions, true)?;
        write_tagged_fields(output, &[], &self._unknown_tagged_fields)?;
        Ok(())
    }
}

/// TopicPartitions, version 0.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone)]
#[cfg_attr(test, derive(Arbitrary))]
pub struct TopicPartitions {
    /// The topic ID.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::uuid()"))]
    pub topic_id: Uuid,
    /// The partitions.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::vec()"))]
    pub partitions: Vec<i32>,
    /// Unknown tagged fields.
    #[cfg_attr(test, proptest(strategy = "proptest_strategies::unknown_tagged_fields()"))]
    pub _unknown_tagged_fields: Vec<RawTaggedField>,
}

impl Default for TopicPartitions {
    fn default() -> Self {
        TopicPartitions {
            topic_id: Uuid::nil(),
            partitions: Vec::<i32>::new(),
            _unknown_tagged_fields: Vec::new(),
        }
    }
}

impl TopicPartitions {
    pub fn new(topic_id: Uuid, partitions: Vec<i32>) -> Self {
        Self {
            topic_id,
            partitions,
            _unknown_tagged_fields: vec![],
        }
    }
}

#[cfg(test)]
mod tests_topic_partitions_new_and_default {
    use super::*;
    
    #[test]
    fn test() {
        let d = TopicPartitions::new(
            Uuid::nil(),
            Vec::<i32>::new(),
        );
        assert_eq!(d, TopicPartitions::default());
    }
}

impl Readable for TopicPartitions {
    fn read(#[allow(unused)] input: &mut impl Read) -> Result<Self> {
        let topic_id = Uuid::read(input)?;
        let partitions = read_array::<i32>(input, "partitions", true)?;
        let tagged_fields_callback = |tag: i32, _: &[u8]| {
            match tag {
                _ => Ok(false)
            }
        };
        let _unknown_tagged_fields = read_tagged_fields(input, tagged_fields_callback)?;
        Ok(TopicPartitions {
            topic_id, partitions, _unknown_tagged_fields
        })
    }
}

impl Writable for TopicPartitions {
    fn write(&self, #[allow(unused)] output: &mut impl Write) -> Result<()> {
        self.topic_id.write(output)?;
        write_array(output, "self.partitions", &self.partitions, true)?;
        write_tagged_fields(output, &[], &self._unknown_tagged_fields)?;
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use proptest::prelude::*;
    
    #[test]
    fn test_java_default() {
        crate::test_utils::test_java_default::<ShareGroupHeartbeatResponse>("ShareGroupHeartbeatResponse", 0);
    }
    
    proptest! {
        #[test]
        fn test_serde(data: ShareGroupHeartbeatResponse) {
            crate::test_utils::test_serde(&data)?;
        }
    }
    
    proptest! {
        #[test]
        fn test_java_arbitrary(data: ShareGroupHeartbeatResponse) {
            crate::test_utils::test_java_arbitrary(&data, "ShareGroupHeartbeatResponse", 0);
        }
    }
}
